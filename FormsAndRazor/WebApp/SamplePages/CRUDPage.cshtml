@{
    Layout = "~/_Layout.cshtml";
    Page.Title = string.Format("Razor - {0}", "CRUD - Insert");

    // is there any nessesary global variables
    var productname = "";
    var supplierid = "0";
    var categoryid = "0";
    var quantityperunit = "";
    var unitprice = "";
    var unitsinstock = "";
    var unitsonorder = "";
    var reorderlevel = "";
    //obtain two lists: SupplierList and CategoryList
    var db = Database.Open("NWDB");
    var supplierquery = @"SELECT SupplierID, CompanyName
FROM Suppliers
Order by CompanyName";
    var categoryquery = @"SELECT CategoryID, CategoryName
FROM Categories
Order by CategoryName";
    var supplierlist = db.Query(supplierquery);
    var categorylist = db.Query(categoryquery);

    //validation controls
    //this is server side vvalidation

    Validation.Add("ProductName",
        Validator.Required("Product name is required"),
        Validator.StringLength(160, 1, "Product name is too long"));
    //Quantity per unit is a nullable feild and the require 0 characters
    Validation.Add("QuantityPerUnit",
        Validator.StringLength(40, 0, "Quantity per unit is limited to 40 characters"));
    Validation.Add("UnitPrice",
        Validator.Range(0.00, double.MaxValue, "Unit Price must be 0.00 or more"));
    Validation.Add("UnitsInStock",
        Validator.Integer("Units in stock needs to be a whole number"),
        Validator.Range(0.00, 32767.0, "Units in stock must be 0 or more"));
    Validation.Add("UnitsOnORder",
       Validator.Integer("Units on order needs to be a whole number"),
       Validator.Range(0.00, 32767.0, "Units on order must be 0 or more"));
    Validation.Add("ReorderLevel",
       Validator.Integer("Reorder level needs to be a whole number"),
       Validator.Range(0.00, 32767.0, "Reorder level must be 0 or more"));

    //Example validators
    //Field a is the same as field b
    //Validation.Add("Email",
    //    Validator.EqualsTo("ConfirmEmail", "Email not confirmed"));

    //Pattern matching for your data IE postal code
    Validation.Add("PostalCode",
        Validator.StringLength(6, 6, "Invalid Postal code length"),
        Validator.Regex(@"^[A-Za-z][0-9][A-Za-z][0-9][A-Za-z][0-9]$", "Postal code is invalid (Sample T6T6T6)"));

}

@section banner{
    <h1>Database: CRUD Product - Insert</h1>
}

@if (IsPost)
{
    //obtain the data from the controls
    supplierid = Request.Form["SupplierList"];
    productname = Request.Form["ProductName"];
    categoryid = Request.Form["CategoryList"];
    quantityperunit = Request.Form["QuantityPerUnit"];
    unitprice = Request.Form["UnitPrice"];
    unitsinstock = Request.Form["UnitsInStock"];
    unitsonorder = Request.Form["UnitsOnOrder"];
    reorderlevel = Request.Form["ReorderLevel"];
    var thebutton = Request.Form["FormButton"];
    //when you have multiple buttons, a good practice is to determine
    //    what action to do for the press button FIRST!
    if (thebutton.Equals("Clear"))
    {
        productname = "";
        supplierid = "0";
        categoryid = "0";
        quantityperunit = "";
        unitprice = "";
        unitsinstock = "";
        unitsonorder = "";
        reorderlevel = "";
    }
    else
    {
        //add button
        //validate data
        //to ACCTUALLY execute the server side validation  you need to execute Validation.IsValid()
        //there is no need for an else to this test as the validation errors will be displayed
        if (Validation.IsValid())
        {
            //test for logical validation
            //these are validations that cannot be preformed easily by Validators

            //assume that the category is a required field
            var valid = true;
            if (categoryid.Equals("0"))
            {
                //bad
                valid = false;
                <div class="col-12 text-center">
                    <p style="color:blue; font-size:large">
                        Select a category
                    </p>
                </div>

            }
            if (valid)
            {
                //good
                try
                {
                    //connect to database
                    //done above
                    //create innsert command
                    var inscommand = @"INSERT INTO Products (ProductName, SupplierID, CategoryID, QuantityPerUnit, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued) VALUES (@0, @1, @2, @3, @4, @5, @6, @7, 0)";

                    //execute the command
                    db.Execute(inscommand, productname,
                        supplierid.Equals("0") ? null : supplierid,
                        categoryid.Equals("0") ? null : categoryid,
                        string.IsNullOrEmpty(quantityperunit) ? null : quantityperunit,
                        string.IsNullOrEmpty(unitprice) ? null : unitprice,
                        string.IsNullOrEmpty(unitsinstock) ? null : unitsinstock,
                        string.IsNullOrEmpty(unitsonorder) ? null : unitsonorder,
                        string.IsNullOrEmpty(reorderlevel) ? null : reorderlevel);
                    <div class="col-12 text-center">
                        <p style="color:green">
                            Product has been added
                        </p>
                    </div>

                }
                catch (Exception ex)
                {
                    <div class="col-12 text-center">
                        <p style="color:firebrick; font-size:large">
                            Processing error: @ex.Message
                        </p>
                    </div>
                }
            }
        }
    }
}


@* Displaying validation errors can be done in a group using the Html.ValidationSummary()
    the Errors by defaulf are listed in a bulleted list, all errors fro a validation are displayed *@
@Html.ValidationSummary()
<form id="theform" method="post">
    <div class="row">
        <div class="col-md-6 text-right">

            <label for="ProductName">Name:</label><br />
            <label for="SupplierID">Supplier:</label><br />
            <label for="CategoryID">Catgeory:</label><br />
            <label for="QuantityPerUnit">Qty/Unit:</label><br />
            <label for="UnitPrice">Price:</label><br />
            <label for="UnitsInStock">QoH:</label><br />
            <label for="UnitsOnOrder">QoO:</label><br />
            <label for="ReorderLevel">RoL:</label><br />
            <br />
        </div>
        <div class="col-me-6 text-left">

            <input type="text" value="@productname"
                   id="ProductName" name="ProductName" />
            @* OR you could display an error beside the control
                ONLY one of the error of the validtation will be shown
                Syntax is Html.Validation("ControlName")*@
            @Html.ValidationMessage("ProductName")
            <br />
            <select id="SupplierList" name="SupplierList">
                <option value="0">select supplier...</option>
                @foreach (var item in supplierlist)
                {
                    //when the select controll is created and loaded
                    //by default the 1st option tag is shown as the selected option
                    //to retain a previous selected value, you need to test
                    //  the previous selected value against the current item that is being used to create the option line
                    //if the previous selected value equals the current item then add the selected attribute to your option tag
                    if (supplierid == item.SupplierID.ToString())
                    {
                        <option value="@item.SupplierID" selected>@item.CompanyName</option>
                    }
                    else
                    {
                        <option value="@item.SupplierID">@item.CompanyName</option>
                    }
                }
            </select>
            <br />
            <select id="CategoryList" name="CategoryList">
                <option value="0">select category...</option>
                @foreach (var item in categorylist)
                {
                    if (categoryid == item.CategoryID.ToString())
                    {
                        <option value="@item.CategoryID" selected>@item.CategoryName</option>
                    }
                    else
                    {
                        <option value="@item.CategoryID">@item.CategoryName</option>
                    }
                    <option value="@item.CategoryID">@item.CategoryName</option>
                }
            </select>
            <br />
            <input type="text" id="QuantityPerUnit" name="QuantityPerUnit" value="@quantityperunit" /><br />
            <input type="text" id="UnitPrice" name="UnitPrice" value="@unitprice" /><br />
            <input type="text" id="UnitsInStock" name="UnitsInStock" value="@unitsinstock" /><br />
            <input type="text" id="UnitsOnOrder" name="UnitsOnOrder" value="@unitsonorder" /><br />
            <input type="text" id="ReorderLevel" name="ReorderLevel" value="@reorderlevel" /><br />
            <br />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-center">
            <input type="submit" id="FormButton" name="FormButton"
                   class="btn btn-primary" value="Add" />
            <input type="submit" id="FormButton" name="FormButton"
                   class="btn" value="Clear" />
        </div>
    </div>
</form>
